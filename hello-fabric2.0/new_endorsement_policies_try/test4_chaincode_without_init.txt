#### 正确的示范，3个组织成功安装、部署、调用链码
$ docker exec -it Org3cli /bin/bash
# cd /opt/gopath/src/github.com/hyperledger/fabric-samples/chaincode
# export GO111MODULE=on

#### 参照test3建立关于3个org的环境变量
# ./env_build.sh
# source env_build.sh
# export pack_name=histroy_try_20200417001
# export pack_id=707105d928286fd2de6c021c2fd6ae9aa5111d0c2dcc2c0f425849a1142fd8ca

#### 转到org1，打包、安装、批准
# ./change_to_org1.sh
# source change_to_org1.sh
# peer lifecycle chaincode package ${pack_name}.tar.gz --path histroy_try/go --lang golang --label ${pack_name}
# peer lifecycle chaincode install ${pack_name}.tar.gz
# peer lifecycle chaincode queryinstalled
# peer lifecycle chaincode approveformyorg --tls true --cafile ${ORDERER_CA_FILE} --channelID mychannel --name ${pack_name} --version 1 --package-id ${pack_name}:${pack_id} --sequence 1 --waitForEvent --signature-policy "AND('Org1.member','Org2.member')"
# peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name ${pack_name} --version 1 --sequence 1 --output json --signature-policy "AND('Org1.member','Org2.member')"

#### 转到org2，安装、批准
# ./change_to_org2.sh
# source change_to_org2.sh
# peer lifecycle chaincode install ${pack_name}.tar.gz
# peer lifecycle chaincode queryinstalled
# peer lifecycle chaincode approveformyorg --tls true --cafile ${ORDERER_CA_FILE} --channelID mychannel --name ${pack_name} --version 1 --package-id ${pack_name}:${pack_id} --sequence 1 --waitForEvent --signature-policy "AND('Org1.member','Org2.member')"
# peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name ${pack_name} --version 1 --sequence 1 --output json --signature-policy "AND('Org1.member','Org2.member')"

#### 转到org1，提交、调用
# ./change_to_org1.sh
# source change_to_org1.sh
# peer lifecycle chaincode commit -o ${ORDERER_ADDRESS} --tls true --cafile ${ORDERER_CA_FILE} --channelID mychannel --name ${pack_name} --peerAddresses ${CORE_PEER_ADDRESS_1} --tlsRootCertFiles ${CORE_PEER_TLS_ROOTCERT_FILE_1} --peerAddresses ${CORE_PEER_ADDRESS_2} --tlsRootCertFiles ${CORE_PEER_TLS_ROOTCERT_FILE_2} --version 1 --sequence 1 --signature-policy "AND('Org1.member','Org2.member')"
# peer lifecycle chaincode querycommitted --channelID mychannel --name ${pack_name}
# peer chaincode invoke -o ${ORDERER_ADDRESS} --tls true --cafile ${ORDERER_CA_FILE} -C mychannel -n ${pack_name} --peerAddresses ${CORE_PEER_ADDRESS_1} --tlsRootCertFiles ${CORE_PEER_TLS_ROOTCERT_FILE_1} --peerAddresses ${CORE_PEER_ADDRESS_2} --tlsRootCertFiles ${CORE_PEER_TLS_ROOTCERT_FILE_2} -c '{"Args":["put_kv","test_key","test-001"]}' --waitForEvent



