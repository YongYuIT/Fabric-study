#### 验证背书策略：多个组织参与背书（org1 and(org2 or prg3)），参与背书的组织都需要批准链码
####################################################################################

$ docker exec -it Org3cli /bin/bash
# cd /opt/gopath/src/github.com/hyperledger/fabric-samples/chaincode
# export GO111MODULE=on
#### 参照test3建立关于3个org的环境变量
# ./env_build.sh
# source env_build.sh
# export pack_name=abstore_test_v5
# export pack_id=c95531738bd735a975752106d8e8b9380a471fc2bfc98a23ed6e047cd8bbb3db
#### 转到peer0.org1，安装 & 批准链码
# ./change_to_org1.sh
# source change_to_org1.sh
# peer lifecycle chaincode package ${pack_name}.tar.gz --path abstore/go/ --lang golang --label ${pack_name}
# peer lifecycle chaincode install ${pack_name}.tar.gz
# peer lifecycle chaincode queryinstalled
# peer lifecycle chaincode approveformyorg --tls true --cafile ${ORDERER_CA_FILE} --channelID mychannel --name ${pack_name} --version 1 --init-required --package-id ${pack_name}:${pack_id} --sequence 1 --waitForEvent --signature-policy "AND('Org1.member',OR('Org2.member','Org3.member'))"
# peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name ${pack_name} --version 1 --sequence 1 --output json --init-required --signature-policy "AND('Org1.member',OR('Org2.member','Org3.member'))"

#### 转到peer0.org2，安装 & 批准链码
# ./change_to_org2.sh
# source change_to_org2.sh
# cd /opt/gopath/src/github.com/hyperledger/fabric-samples/chaincode
# peer lifecycle chaincode install ${pack_name}.tar.gz
# peer lifecycle chaincode queryinstalled
# peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name ${pack_name} --version 1 --sequence 1 --output json --init-required --signature-policy "AND('Org1.member',OR('Org2.member','Org3.member'))"
# peer lifecycle chaincode approveformyorg --tls true --cafile ${ORDERER_CA_FILE} --channelID mychannel --name ${pack_name} --version 1 --init-required --package-id ${pack_name}:${pack_id} --sequence 1 --waitForEvent --signature-policy "AND('Org1.member',OR('Org2.member','Org3.member'))"
# peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name ${pack_name} --version 1 --sequence 1 --output json --init-required --signature-policy "AND('Org1.member',OR('Org2.member','Org3.member'))"

#### 转到peer0.org1,在org1、org2批准的情况下，尝试部署链码
# ./change_to_org1.sh
# source change_to_org1.sh
# peer lifecycle chaincode commit -o ${ORDERER_ADDRESS} --tls true --cafile ${ORDERER_CA_FILE} --channelID mychannel --name ${pack_name} --peerAddresses ${CORE_PEER_ADDRESS_1} --tlsRootCertFiles ${CORE_PEER_TLS_ROOTCERT_FILE_1} --peerAddresses ${CORE_PEER_ADDRESS_2} --tlsRootCertFiles ${CORE_PEER_TLS_ROOTCERT_FILE_2} --version 1 --sequence 1 --init-required --signature-policy "AND('Org1.member',OR('Org2.member','Org3.member'))"
# peer lifecycle chaincode querycommitted --channelID mychannel --name ${pack_name}
#### 居然可以部署成功，尝试调用一下
# peer lifecycle chaincode queryinstalled
# peer lifecycle chaincode querycommitted --channelID mychannel --name ${pack_name}
# peer chaincode invoke -o ${ORDERER_ADDRESS} --tls true --cafile ${ORDERER_CA_FILE} -C mychannel -n ${pack_name} --peerAddresses ${CORE_PEER_ADDRESS_1} --tlsRootCertFiles ${CORE_PEER_TLS_ROOTCERT_FILE_1} --peerAddresses ${CORE_PEER_ADDRESS_2} --tlsRootCertFiles ${CORE_PEER_TLS_ROOTCERT_FILE_2} --isInit -c '{"Args":["Init","a","100","b","100"]}'
#### Chaincode invoke successful
# peer chaincode query -C mychannel -n mycc -c '{"Args":["query","a"]}'
#### 调用成功
