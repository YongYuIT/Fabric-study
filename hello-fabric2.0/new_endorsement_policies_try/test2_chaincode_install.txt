# 验证背书策略：多个组织参与背书（org1 and(org2 or prg3)），参与背书的组织都需要批准链码
####################################################################################

$ docker exec -it Org3cli /bin/bash
# cd /opt/gopath/src/github.com/hyperledger/fabric-samples/chaincode
# export GO111MODULE=on

#### 转到peer0.org1，安装 & 批准链码
# export CORE_PEER_ADDRESS=peer0.org1.example.com:7051
# export CORE_PEER_LOCALMSPID=Org1MSP
# export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
# export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin\@org1.example.com/msp/
# peer lifecycle chaincode package abstore_test_v4.tar.gz --path abstore/go/ --lang golang --label abstore_test_v4
# peer lifecycle chaincode install abstore_test_v4.tar.gz
# peer lifecycle chaincode queryinstalled
# peer lifecycle chaincode approveformyorg --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --channelID mychannel --name abstore_test_v4 --version 1 --init-required --package-id abstore_test_v4:43dc4e1d87e3e63f5185bc4c893bfea972ae11848f08767d02981dc534de4494, --sequence 1 --waitForEvent --signature-policy "AND('Org1.member',OR('Org2.member','Org3.member'))"
# peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name abstore_test_v4 --version 1 --sequence 1 --output json --init-required --signature-policy "AND('Org1.member',OR('Org2.member','Org3.member'))"

#### 转到peer0.org2，安装 & 批准链码
# export CORE_PEER_ADDRESS=peer0.org2.example.com:9051
# export CORE_PEER_LOCALMSPID=Org2MSP
# export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt
# export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin\@org2.example.com/msp/
# cd /opt/gopath/src/github.com/hyperledger/fabric-samples/chaincode
# peer lifecycle chaincode install abstore_test_v4.tar.gz
# peer lifecycle chaincode queryinstalled
# peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name abstore_test_v4 --version 1 --sequence 1 --output json --init-required --signature-policy "AND('Org1.member',OR('Org2.member','Org3.member'))"
# peer lifecycle chaincode approveformyorg --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --channelID mychannel --name abstore_test_v4 --version 1 --init-required --package-id abstore_test_v4:43dc4e1d87e3e63f5185bc4c893bfea972ae11848f08767d02981dc534de4494 --sequence 1 --waitForEvent --signature-policy "AND('Org1.member',OR('Org2.member','Org3.member'))"
# peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name abstore_test_v4 --version 1 --sequence 1 --output json --init-required --signature-policy "AND('Org1.member',OR('Org2.member','Org3.member'))"

#### 转到peer0.org1,在org1、org2批准的情况下，尝试部署链码
# export CORE_PEER_ADDRESS=peer0.org1.example.com:7051
# export CORE_PEER_LOCALMSPID=Org1MSP
# export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
# export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin\@org1.example.com/msp/
# peer lifecycle chaincode commit -o orderer.example.com:7050 --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --channelID mychannel --name abstore_test_v4 --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses peer0.org2.example.com:9051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt --version 1 --sequence 1 --init-required --signature-policy "AND('Org1.member',OR('Org2.member','Org3.member'))"
# peer lifecycle chaincode querycommitted --channelID mychannel --name abstore_test_v4
#### 居然可以部署成功，尝试调用一下
# peer chaincode invoke -o orderer.example.com:7050 --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n abstore_test_v4 --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses peer0.org2.example.com:9051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt --isInit -c '{"Args":["Init","a","100","b","100"]}'
#### 虽然部署成功，但是调不通
Error: endorsement failure during invoke. response: status:500 message:"make sure the chaincode abstore_test_v4 has been successfully defined on channel mychannel and try again: chaincode definition for 'abstore_test_v4' exists, but chaincode is not installed" 

#### 在org3上安装链码，然后再在peer0.org1上重试
# export CORE_PEER_ADDRESS=peer0.org3.example.com:11051
# export CORE_PEER_LOCALMSPID=Org3MSP
# export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt
# export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org3.example.com/users/Admin\@org3.example.com/msp/
# peer lifecycle chaincode install abstore_test_v4.tar.gz
# peer lifecycle chaincode queryinstalled
# peer lifecycle chaincode querycommitted --channelID mychannel --name abstore_test_v4
# peer chaincode invoke -o orderer.example.com:7050 --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n abstore_test_v4 --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses peer0.org2.example.com:9051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt --isInit -c '{"Args":["Init","a","100","b","100"]}'
# 也调不通

#### 在org3上批准链码，重试
# peer lifecycle chaincode approveformyorg --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --channelID mychannel --name abstore_test_v4 --version 1 --init-required --package-id abstore_test_v4:43dc4e1d87e3e63f5185bc4c893bfea972ae11848f08767d02981dc534de4494 --sequence 1 --waitForEvent --signature-policy "AND('Org1.member',OR('Org2.member','Org3.member'))"
# peer lifecycle chaincode querycommitted --channelID mychannel --name abstore_test_v4
# peer chaincode invoke -o orderer.example.com:7050 --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem -C mychannel -n abstore_test_v4 --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses peer0.org2.example.com:9051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt --isInit -c '{"Args":["Init","a","100","b","100"]}'
# 也调不通，很奇怪，待查......

