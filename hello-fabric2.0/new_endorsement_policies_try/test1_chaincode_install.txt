# 验证背书策略：不指定背书策略的条件下，大多数同意即可
###################################################

$ docker exec -it cli /bin/bash
# cd /opt/gopath/src/github.com/hyperledger/fabric-samples/chaincode
# export GO111MODULE=on
# peer lifecycle chaincode package abstore_test_v1.tar.gz --path abstore/go/ --lang golang --label abstore_test_v1
# peer lifecycle chaincode install abstore_test_v1.tar.gz
# peer lifecycle chaincode queryinstalled
# peer lifecycle chaincode approveformyorg --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --channelID mychannel --name abstore_test_v1 --version 1 --init-required --package-id abstore_test_v1:0815eddc914fe7d8e195ba4069b6e19bef0a7f0d05b9126c9fe37f15d7a2d48f --sequence 1 --waitForEvent
# peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name abstore_test_v1 --version 1 --sequence 1 --output json --init-required

#### 转到peer0.org2，安装 & 批准链码
# export CORE_PEER_ADDRESS=peer0.org2.example.com:9051
# export CORE_PEER_LOCALMSPID=Org2MSP
# export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt
# export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin\@org2.example.com/msp/
# cd /opt/gopath/src/github.com/hyperledger/fabric-samples/chaincode
# peer lifecycle chaincode install abstore_test_v1.tar.gz
# peer lifecycle chaincode queryinstalled
# peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name abstore_test_v1 --version 1 --sequence 1 --output json --init-required
# peer lifecycle chaincode approveformyorg --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --channelID mychannel --name abstore_test_v1 --version 1 --init-required --package-id abstore_test_v1:0815eddc914fe7d8e195ba4069b6e19bef0a7f0d05b9126c9fe37f15d7a2d48f --sequence 1 --waitForEvent
# peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name abstore_test_v1 --version 1 --sequence 1 --output json --init-required

# 大多数组织批准链码，是否可以在默认背书策略（大多数同意即可）下部署链码？
# 尝试部署转到，peer0.org1，部署链码
# export CORE_PEER_ADDRESS=peer0.org1.example.com:7051
# export CORE_PEER_LOCALMSPID=Org1MSP
# export CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
# export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin\@org1.example.com/msp/
# peer lifecycle chaincode commit -o orderer.example.com:7050 --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --channelID mychannel --name abstore_test_v1 --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --peerAddresses peer0.org2.example.com:9051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt --version 1 --sequence 1 --init-required
# peer lifecycle chaincode querycommitted --channelID mychannel --name abstore_test_v1
# 部署成功，事实证明，大多数组织批准链码，可以在默认背书策略（大多数同意即可）下部署链码

# 为了严谨，尝试在只有org1批准链码的情况下，链码是否可以在默认背书策略下部署成功
# cd /opt/gopath/src/github.com/hyperledger/fabric-samples/chaincode
# peer lifecycle chaincode package abstore_test_v2.tar.gz --path abstore/go/ --lang golang --label abstore_test_v2
# peer lifecycle chaincode install abstore_test_v2.tar.gz
# peer lifecycle chaincode approveformyorg --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --channelID mychannel --name abstore_test_v2 --version 1 --init-required --package-id abstore_test_v2:55e4d12fff28eb62a8d9a3281ba118b1bf61ad055d65e98575e6adbb12cb47e2 --sequence 1 --waitForEvent
# peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name abstore_test_v2 --version 1 --sequence 1 --output json --init-required
# peer lifecycle chaincode commit -o orderer.example.com:7050 --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --channelID mychannel --name abstore_test_v2 --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --version 1 --sequence 1 --init-required

Error: transaction invalidated with status (ENDORSEMENT_POLICY_FAILURE)

# 再次修改，如果背书策略指定只需org1背书，则应该可以部署成功
# cd /opt/gopath/src/github.com/hyperledger/fabric-samples/chaincode
# peer lifecycle chaincode package abstore_test_v3.tar.gz --path abstore/go/ --lang golang --label abstore_test_v3
# peer lifecycle chaincode install abstore_test_v3.tar.gz
# peer lifecycle chaincode approveformyorg --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --channelID mychannel --name abstore_test_v3 --version 1 --init-required --package-id abstore_test_v3:fed990954a222601b20962623b2608ca7ba83d4f3ebaf7dec463b7571f918b38 --sequence 1 --waitForEvent --signature-policy "AND('Org1.member')"
# peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name abstore_test_v3 --version 1 --sequence 1 --output json --init-required --signature-policy "AND('Org1.member')"
# peer lifecycle chaincode commit -o orderer.example.com:7050 --tls true --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem --channelID mychannel --name abstore_test_v3 --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt --version 1 --sequence 1 --init-required --signature-policy "AND('Org1.member')"
# 很奇怪，在部署的地方报错，待查......






