#### 正确的示范，3个组织成功安装、部署、调用链码
$ docker exec -it Org3cli /bin/bash
# cd /opt/gopath/src/github.com/hyperledger/fabric-samples/chaincode
# export GO111MODULE=on

#### 先编写change_to_org1.sh、change_to_org2.sh、change_to_org3.sh如下，

# vi env_build.sh
export CORE_PEER_ADDRESS_1=peer0.org1.example.com:7051
export CORE_PEER_LOCALMSPID_1=Org1MSP
export CORE_PEER_TLS_ROOTCERT_FILE_1=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
export CORE_PEER_MSPCONFIGPATH_1=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin\@org1.example.com/msp/

export CORE_PEER_ADDRESS_2=peer0.org2.example.com:9051
export CORE_PEER_LOCALMSPID_2=Org2MSP
export CORE_PEER_TLS_ROOTCERT_FILE_2=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt
export CORE_PEER_MSPCONFIGPATH_2=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin\@org2.example.com/msp/

export CORE_PEER_ADDRESS_3=peer0.org3.example.com:11051
export CORE_PEER_LOCALMSPID_3=Org3MSP
export CORE_PEER_TLS_ROOTCERT_FILE_3=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt
export CORE_PEER_MSPCONFIGPATH_3=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org3.example.com/users/Admin\@org3.example.com/msp/

export ORDERER_ADDRESS=orderer.example.com:7050
export ORDERER_CA_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem

# vi change_to_org1.sh
export CORE_PEER_ADDRESS=${CORE_PEER_ADDRESS_1}
export CORE_PEER_LOCALMSPID=${CORE_PEER_LOCALMSPID_1}
export CORE_PEER_TLS_ROOTCERT_FILE=${CORE_PEER_TLS_ROOTCERT_FILE_1}
export CORE_PEER_MSPCONFIGPATH=${CORE_PEER_MSPCONFIGPATH_1}

# vi change_to_org2.sh
export CORE_PEER_ADDRESS=${CORE_PEER_ADDRESS_2}
export CORE_PEER_LOCALMSPID=${CORE_PEER_LOCALMSPID_2}
export CORE_PEER_TLS_ROOTCERT_FILE=${CORE_PEER_TLS_ROOTCERT_FILE_2}
export CORE_PEER_MSPCONFIGPATH=${CORE_PEER_MSPCONFIGPATH_2}

# vi change_to_org3.sh
export CORE_PEER_ADDRESS=${CORE_PEER_ADDRESS_3}
export CORE_PEER_LOCALMSPID=${CORE_PEER_LOCALMSPID_3}
export CORE_PEER_TLS_ROOTCERT_FILE=${CORE_PEER_TLS_ROOTCERT_FILE_3}
export CORE_PEER_MSPCONFIGPATH=${CORE_PEER_MSPCONFIGPATH_3}

# chmod -R 755 *.sh
# ./env_build.sh
# source env_build.sh

#### 转到org1，打包、安装、批准
# export pack_name=abstore_test_v7
# export pack_id=8448ce3dc3af215aae0a8803ad53b6ff50a5eba1a0316de19d3fbde7b9a8d521
# export pack_endorsement="AND('Org1MSP.member',OR('Org2MSP.member','Org3MSP.member'))"
# ./change_to_org1.sh
# source change_to_org1.sh
# peer lifecycle chaincode package ${pack_name}.tar.gz --path abstore/go/ --lang golang --label ${pack_name}
# peer lifecycle chaincode install ${pack_name}.tar.gz
# peer lifecycle chaincode queryinstalled
# peer lifecycle chaincode approveformyorg --tls true --cafile ${ORDERER_CA_FILE} --channelID mychannel --name ${pack_name} --version 1 --init-required --package-id ${pack_name}:${pack_id} --sequence 1 --waitForEvent --signature-policy ${pack_endorsement}
# peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name ${pack_name} --version 1 --sequence 1 --output json --init-required --signature-policy ${pack_endorsement}

#### 转到org2，安装、批准
# ./change_to_org2.sh
# source change_to_org2.sh
# peer lifecycle chaincode install ${pack_name}.tar.gz
# peer lifecycle chaincode queryinstalled
# peer lifecycle chaincode approveformyorg --tls true --cafile ${ORDERER_CA_FILE} --channelID mychannel --name ${pack_name} --version 1 --init-required --package-id ${pack_name}:${pack_id} --sequence 1 --waitForEvent --signature-policy ${pack_endorsement}
# peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name ${pack_name} --version 1 --sequence 1 --output json --init-required --signature-policy ${pack_endorsement}

#### 转到org3，安装、批准
# ./change_to_org3.sh
# source change_to_org3.sh
# peer lifecycle chaincode install ${pack_name}.tar.gz
# peer lifecycle chaincode queryinstalled
# peer lifecycle chaincode approveformyorg --tls true --cafile ${ORDERER_CA_FILE} --channelID mychannel --name ${pack_name} --version 1 --init-required --package-id ${pack_name}:${pack_id} --sequence 1 --waitForEvent --signature-policy ${pack_endorsement}
# peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name ${pack_name} --version 1 --sequence 1 --output json --init-required --signature-policy ${pack_endorsement}

#### 转到org1，提交、调用
# ./change_to_org1.sh
# source change_to_org1.sh
# peer lifecycle chaincode commit -o ${ORDERER_ADDRESS} --tls true --cafile ${ORDERER_CA_FILE} --channelID mychannel --name ${pack_name} --peerAddresses ${CORE_PEER_ADDRESS_1} --tlsRootCertFiles ${CORE_PEER_TLS_ROOTCERT_FILE_1} --peerAddresses ${CORE_PEER_ADDRESS_2} --tlsRootCertFiles ${CORE_PEER_TLS_ROOTCERT_FILE_2} --peerAddresses ${CORE_PEER_ADDRESS_3} --tlsRootCertFiles ${CORE_PEER_TLS_ROOTCERT_FILE_3} --version 1 --sequence 1 --init-required --signature-policy ${pack_endorsement}
# peer lifecycle chaincode querycommitted --channelID mychannel --name ${pack_name}
# peer chaincode invoke -o ${ORDERER_ADDRESS} --tls true --cafile ${ORDERER_CA_FILE} -C mychannel -n ${pack_name} --peerAddresses ${CORE_PEER_ADDRESS_1} --tlsRootCertFiles ${CORE_PEER_TLS_ROOTCERT_FILE_1} --peerAddresses ${CORE_PEER_ADDRESS_2} --tlsRootCertFiles ${CORE_PEER_TLS_ROOTCERT_FILE_2} --peerAddresses ${CORE_PEER_ADDRESS_3} --tlsRootCertFiles ${CORE_PEER_TLS_ROOTCERT_FILE_3} --isInit -c '{"Args":["Init","a","123","b","321"]}' --waitForEvent
#### Chaincode invoke successful
# peer chaincode query -C mychannel -n ${pack_name} -c '{"Args":["query","a"]}'



