1、搭建zookeeper和kafka集群，参考https://github.com/YongYuIT/Fabric-study/tree/master/hello-kafka

	1.1 准备Java环境
	$ java -version
	java version "1.8.0_211"
	Java(TM) SE Runtime Environment (build 1.8.0_211-b12)
	Java HotSpot(TM) 64-Bit Server VM (build 25.211-b12, mixed mode)
	$ javac -version
	javac 1.8.0_211
	
	1.2 准备docker，docker-compose环境
	$ docker version
	Client:
	Version:           18.09.6
	API version:       1.39
	Go version:        go1.10.8
	Git commit:        481bc77
	Built:             Sat May  4 02:35:57 2019
	OS/Arch:           linux/amd64
	Experimental:      false

	Server: Docker Engine - Community
	Engine:
	Version:          18.09.6
	API version:      1.39 (minimum version 1.12)
	Go version:       go1.10.8
	Git commit:       481bc77
	Built:            Sat May  4 01:59:36 2019
	OS/Arch:          linux/amd64
	Experimental:     false
	$ docker-compse -version
	docker-compose version 1.25.0dev, build f764faa8
	docker-py version: 3.7.2
	CPython version: 3.7.3
	OpenSSL version: OpenSSL 1.1.0j  20 Nov 2018
	
	1.3 下载解压zookeeper安装包，编辑zookeeper配置文件
	$ wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/stable/apache-zookeeper-3.5.7-bin.tar.gz
	$ tar xvf apache-zookeeper-3.5.7-bin.tar.gz
	$ cd apache-zookeeper-3.5.7-bin/conf/
	$ cp zoo_sample.cfg zoo.cfg
	$ echo "server.1=test_1.thinking.com:2888:3888" >> zoo.cfg
	$ echo "server.2=test_2.thinking.com:2888:3888" >> zoo.cfg
	$ echo "server.3=test_3.thinking.com:2888:3888" >> zoo.cfg
	
	1.4 编写docker-compose文件和zk启动命令，启动zookeeper集群（参见docker-compose-zookeeper.yaml和zk-cmd文件夹）
	$ cd ~/Desktop/Fabric-study/hello-fabric2.0/build-netrowk/test2-orderer-with-kafka/zk-kafka-part
	$ docker stop $(docker ps -aq)
	$ docker rm -f $(docker ps -aq)
	$ docker network prune
	$ docker volume rm $(docker volume list)
	$ cd thk_network
	$ docker-compose -f docker-compose-zookeeper.yaml up -d
	
	1.5 查看集群情况
	$ docker exec -it test_1.thinking.com /bin/bash
	# /zookeeper/bin/zkServer.sh status
	ZooKeeper JMX enabled by default
	Using config: /zookeeper/bin/../conf/zoo.cfg
	Client port found: 2181. Client address: localhost.
	Mode: follower
	$ docker exec -it test_2.thinking.com /bin/bash
	# /zookeeper/bin/zkServer.sh status
	ZooKeeper JMX enabled by default
	Using config: /zookeeper/bin/../conf/zoo.cfg
	Client port found: 2181. Client address: localhost.
	Mode: follower
	$ docker exec -it test_3.thinking.com /bin/bash
	# /zookeeper/bin/zkServer.sh status
	ZooKeeper JMX enabled by default
	Using config: /zookeeper/bin/../conf/zoo.cfg
	Client port found: 2181. Client address: localhost.
	Mode: leader
	####这里可以清楚地看到test_3.thinking.com被选举为leader，其他两个为follower
	
2、在zookeeper集群地基础上，搭建kafka集群，参考https://github.com/YongYuIT/Fabric-study/tree/master/hello-kafka
####注意，fabric网络要求kafka节点数目最小是4个，参考https://hyperledger-fabric.readthedocs.io/en/latest/kafka.html#steps

	2.1 下载并解压kafka安装包
	$ wget https://mirrors.tuna.tsinghua.edu.cn/apache/kafka/2.5.0/kafka_2.13-2.5.0.tgz
	$ tar xvf kafka_2.13-2.5.0.tgz
	2.2 编辑kafka配置文件
	$ cd ~/Desktop/Fabric-study/hello-fabric2.0/build-netrowk/test2-orderer-with-kafka/zk-kafka-part
	$ cp /mnt/hgfs/zk-kafka-env/kafka_2.13-2.5.0/config/server.properties kafka-cmd/server_1.properties
	$ cp /mnt/hgfs/zk-kafka-env/kafka_2.13-2.5.0/config/server.properties kafka-cmd/server_2.properties
	$ cp /mnt/hgfs/zk-kafka-env/kafka_2.13-2.5.0/config/server.properties kafka-cmd/server_3.properties
	$ cp /mnt/hgfs/zk-kafka-env/kafka_2.13-2.5.0/config/server.properties kafka-cmd/server_4.properties
	####编辑这三个配置文件，需要求改broker.id，host.name，log.dirs，zookeeper.connect四个参数
	2.3 编写docker-compose文件和kafka启动命令，启动kafka集群（参见docker-compose-kafka.yaml和kafka-cmd文件夹）
	$ docker-compose -f docker-compose-kafka.yaml up -d
	2.4 创建测试主题，验证集群可用性
	$ docker exec -it kafka_1.thinking.com /bin/bash
	# cd /kafka/bin
	# ./kafka-topics.sh --create --zookeeper test_1.thinking.com:2181 --replication-factor 2 --partitions 3 --topic test-with-create
	# ./kafka-topics.sh --zookeeper test_1.thinking.com:2181 --describe --topic test-with-create
	####或者在docker虚拟网络之外测试
	$ cd /mnt/hgfs/zk-kafka-env/kafka_2.13-2.5.0/bin
	$ ./kafka-topics.sh --create --zookeeper 0.0.0.0:2181 --replication-factor 2 --partitions 3 --topic test-with-create1
	$ ./kafka-topics.sh --zookeeper 0.0.0.0:2181 --describe --topic test-with-create1
	$ ./kafka-topics.sh --list --bootstrap-server 0.0.0.0:9092
	####直接使用0.0.0.0:9092地址操作kafka会发现返回错误，这是因为在kafka的配置文件server_X.properties里面写的都是域名，在docker虚拟网络之外，这些域名没有办法识别
	####如果zk-kafka集群和fabric集群也是分开在两个虚拟网络里面也会有这个问题
	####所以，最好统一两个环境里面的虚拟网络
	
	
	
	
3、安装kafka manager（便于可视化），参考https://github.com/YongYuIT/Fabric-study/tree/master/hello-kafka

	3.1 git下载kafka manager源码并编译
	$ git clone https://github.com/yahoo/kafka-manager.git
	$ cd kafka-manager/
	$ ./sbt clean dist
	####如果编译失败，迁出之前的版本编译试一下
	####git tag
	####git checkout 1.3.3.18
	####./sbt clean dist
	
4、使用kafka作为orderer消息组件，参考https://hyperledger-fabric.readthedocs.io/en/latest/kafka.html#bringing-up-a-kafka-based-ordering-service
	4.1 修改初始区块的配置文件，主要是
	Orderer.OrdererType
	Orderer.Kafka.Brokers
	Orderer.AbsoluteMaxBytes
	
	

	
