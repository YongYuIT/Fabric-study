$ docker exec -it Org3cli /bin/bash
# cd /opt/gopath/src/github.com/hyperledger/fabric-samples/chaincode
# export GO111MODULE=on
# export GOPROXY=https://mirrors.aliyun.com/goproxy/
#### 参照test3建立关于3个org的环境变量
# ./env_build.sh
# source env_build.sh
# export pack_name=histroy_try20200420001
# export pack_id=c9c3a2173689cb40ad0a14268c61d4321207816c87a481e46bfb3488751f71c3
# export pack_endorsement="AND('Org1MSP.member','Org2MSP.member')"
#### 转到peer0.org1，安装 & 批准链码
# ./change_to_org1.sh
# source change_to_org1.sh
# peer lifecycle chaincode package ${pack_name}.tar.gz --path histroy_try/go/ --lang golang --label ${pack_name}
# peer lifecycle chaincode install ${pack_name}.tar.gz
# peer lifecycle chaincode queryinstalled
# peer lifecycle chaincode approveformyorg --tls true --cafile ${ORDERER_CA_FILE} --channelID mychannel --name ${pack_name} --version 1 --package-id ${pack_name}:${pack_id} --sequence 1 --waitForEvent --signature-policy ${pack_endorsement}
# peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name ${pack_name} --version 1 --sequence 1 --output json --signature-policy ${pack_endorsement}

#### 转到org2，安装、批准
# ./change_to_org2.sh
# source change_to_org2.sh
# peer lifecycle chaincode install ${pack_name}.tar.gz
# peer lifecycle chaincode queryinstalled
# peer lifecycle chaincode approveformyorg --tls true --cafile ${ORDERER_CA_FILE} --channelID mychannel --name ${pack_name} --version 1 --package-id ${pack_name}:${pack_id} --sequence 1 --waitForEvent --signature-policy ${pack_endorsement}
# peer lifecycle chaincode checkcommitreadiness --channelID mychannel --name ${pack_name} --version 1 --sequence 1 --output json --signature-policy ${pack_endorsement}

#### 转到org1，提交、调用
# ./change_to_org1.sh
# source change_to_org1.sh
# peer lifecycle chaincode commit -o ${ORDERER_ADDRESS} --tls true --cafile ${ORDERER_CA_FILE} --channelID mychannel --name ${pack_name} --peerAddresses ${CORE_PEER_ADDRESS_1} --tlsRootCertFiles ${CORE_PEER_TLS_ROOTCERT_FILE_1} --peerAddresses ${CORE_PEER_ADDRESS_2} --tlsRootCertFiles ${CORE_PEER_TLS_ROOTCERT_FILE_2} --version 1 --sequence 1 --signature-policy ${pack_endorsement} --waitForEvent
# peer lifecycle chaincode querycommitted --channelID mychannel --name ${pack_name}
# peer chaincode invoke -o orderer.example.com:7050 --tls true --cafile ${ORDERER_CA_FILE} --channelID mychannel -C mychannel -n ${pack_name} --peerAddresses ${CORE_PEER_ADDRESS_1} --tlsRootCertFiles ${CORE_PEER_TLS_ROOTCERT_FILE_1} --peerAddresses ${CORE_PEER_ADDRESS_2} --tlsRootCertFiles ${CORE_PEER_TLS_ROOTCERT_FILE_2} -c '{"Args":["put_kv","test_key","test-001"]}' --waitForEvent
# peer chaincode query -C mychannel -n ${pack_name} -c '{"Args":["get_value","test_key"]}'
# peer chaincode query -C mychannel -n ${pack_name} -c '{"Args":["get_value_history","test_key"]}'
