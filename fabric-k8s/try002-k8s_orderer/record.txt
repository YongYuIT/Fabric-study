########在fabric nfs服务器上
$ cd /home/yong/nfs-test
$ rm -rf ./*
$ git clone https://github.com/hyperledger/fabric-samples.git
$ cd fabric-samples/first-network/
########改fabric-samples/first-network/configtx.yaml文件
73行
            - Host: peer0.org1.example.com
改为
            - Host: peer0-org1-example-com
104行
            - Host: peer0.org2.example.com
改为
            - Host: peer0-org2-example-com
211行
        - orderer.example.com:7050
改为
        - k8s:30050
360行
                - Host: orderer.example.com
                  Port: 7050
改为
                - Host: k8s
                  Port: 30050
381行
                - orderer.example.com:7050
改为
                - k8s:30050
共5处
$ ./byfn.sh generate
$ cd /home/yong/
$ sudo chown -R nobody:nogroup nfs-test
$ sudo chmod -R 777 nfs-test

HOST环境
192.168.186.131    k8s
192.168.186.188    peer0-org1-example-com
192.168.186.187    peer1-org1-example-com

在k8s上部署orderer
# kubectl create -f pv.yaml
# kubectl get persistentvolume
# kubectl create -f pvc.yaml
# kubectl get persistentvolumeclaim

# kubectl create -f orderer-rc.yaml
# kubectl create -f orderer-svc.yaml

在两个peer两个上挂载nfs
$ sudo apt install nfs-common
$ showmount -e 192.168.186.151 #192.168.186.151是nfs服务器地址
Export list for 192.168.186.151:
/home/yong/nfs-test 192.168.186.0/24
$ sudo mkdir /fabric-config
$ sudo chmod -R 777 /fabric-config
$ sudo mount -t nfs 192.168.186.151:/home/yong/nfs-test /fabric-config
$ ls /fabric-config
########install docker, ref to https://kubernetes.io/docs/setup/cri/#docker
$ sudo apt-get update
$ sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
$ sudo add-apt-repository \
  "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) \
  stable"
$ sudo apt-get install docker-ce=18.06.2~ce~3-0~ubuntu
########install docker-compose
$ sudo apt-get install python-pip
$ sudo pip install docker-compose
####清空docker环境
$ docker stop $(docker ps -aq)
$ docker rm -f $(docker ps -aq)
$ docker network prune
$ docker volume rm $(docker volume list)
$ sudo groupadd docker
$ sudo gpasswd -a ${USER} docker
$ sudo service docker restart
$ newgrp - docker
####启动peer
$ docker-compose -f peer0.org1.yaml up -d
$ docker-compose -f peer1.org1.yaml up -d

测试
$ docker exec -it fca752ebbc0d /bin/bash
# peer channel list
# export CHANNEL_NAME=mychannel
# export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
# peer channel create -o k8s:30050 -c $CHANNEL_NAME -f /opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts/channel.tx
# peer channel join -b ${CHANNEL_NAME}.block
# peer channel list
$ docker cp fca752ebbc0d:/opt/gopath/src/github.com/hyperledger/fabric/peer/mychannel.block /mnt/hgfs/env-path/

$ docker cp /mnt/hgfs/env-path/mychannel.block 6cd3cda0f88f:/opt/gopath/src/github.com/hyperledger/fabric/peer/
$ docker exec -it 6cd3cda0f88f /bin/bash
# peer channel list
# export CHANNEL_NAME=mychannel
# export CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
# peer channel join -b ${CHANNEL_NAME}.block
# peer channel list
########success
