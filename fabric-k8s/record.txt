########install docker, ref to https://kubernetes.io/docs/setup/cri/#docker
$ sudo apt-get update
$ sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
$ sudo add-apt-repository \
  "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) \
  stable"
$ sudo apt-get install docker-ce=18.06.2~ce~3-0~ubuntu

########install docker-compose
$ sudo apt-get install python-pip
$ sudo pip install docker-compose

########clean env
$ docker stop $(docker ps -aq)
$ docker rm -f $(docker ps -aq)
$ docker network prune
$ docker volume rm $(docker volume list)

########config go env
########download docker imgs
$ go get github.com/hyperledger/fabric
####if failed
$ cd $GOPATH/src/github.com/hyperledger/
$ rm -rf fabric
$ git clone https://github.com/hyperledger/fabric.git
$ cd $GOPATH/
$ cd src/github.com/hyperledger/fabric/scripts
$ ./bootstrap.sh


########build tools
$ cd $GOPATH/src/github.com/hyperledger/fabric/common/tools/cryptogen/
$ sudo apt-get install gcc
$ go build
$ go install
$ cd $GOPATH/src/github.com/hyperledger/fabric/common/tools/configtxgen/
$ go build
$ go install

########
$ git clone https://github.com/hyperledger/fabric-samples.git
$ cd fabric-samples20190326001/first-network/
$ ./byfn.sh generate
$ ./byfn.sh up
####success

########ubild nfs server
$ sudo apt-get install nfs-kernel-server
$ mkdir nfs-test
$ sudo chown nobody:nogroup nfs-test
$ sudo chmod 777 nfs-test
$ ll
... ...
drwxrwxrwx  2 nobody nogroup      4096 Mar 26 01:51 nfs-test/
... ...
$ sudo gedit  /etc/exports
/home/yong/nfs-test    192.168.186.0/24(rw,async)
$ sudo exportfs -a
$ sudo systemctl restart nfs-kernel-server
$ sudo ufw status #查看当前防火墙状态，如果正在启用，需要配置允许nfs
$ showmount -e localhost
Export list for localhost:
/home/yong/nfs-test 192.168.186.0/24
####在另一台机器上测试nfs（在centos上）
$ sudo yum -y install nfs-utils
$ showmount -e 192.168.186.151 #192.168.186.151是nfs服务器地址
Export list for 192.168.186.151:
/home/yong/nfs-test 192.168.186.0/24
####回到fabric环境
$ cd /home/yong/nfs-test
$ git clone https://github.com/hyperledger/fabric-samples.git
$ cd fabric-samples/first-network/
########参照Fabric-study/fabric-muti/try002-change-hostname里面的，对fabric-samples配置文件进行修改
$ ./byfn.sh generate
$ cd /home/yong/
$ sudo chown -R nobody:nogroup nfs-test
$ sudo chmod -R 777 nfs-test

########在k8s上挂载nfs
# kubectl create -f pv.yaml
# kubectl get persistentvolume
# kubectl create -f pvc.yaml
# kubectl get persistentvolumeclaim

########k8s部署orderer服务，orderer应当部署为k8s的一个无状态服务svc，但是为了降低难度，先用一个pod（一个容器）支持svc，后期再试多个pod支持svc
# kubectl create -f orderer-rc.yaml
# kubectl get pods
NAME            READY   STATUS    RESTARTS   AGE
orderer-dxnr8   1/1     Running   0          11s
# kubectl describe pod orderer-vhntt
# kubectl logs orderer-dxnr8
2019-03-27 06:53:55.250 UTC [localconfig] completeInitialization -> INFO 001 Kafka.Version unset, setting to 0.10.2.0
2019-03-27 06:53:55.332 UTC [orderer.common.server] prettyPrintStruct -> INFO 002 Orderer config values:
	General.LedgerType = "file"
	General.ListenAddress = "0.0.0.0"
	General.ListenPort = 7050
	General.TLS.Enabled = true
	General.TLS.PrivateKey = "/fabric-config/fabric-samples20190326001/first-network/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.key"
	General.TLS.Certificate = "/fabric-config/fabric-samples20190326001/first-network/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.crt"
	General.TLS.RootCAs = [/fabric-config/fabric-samples20190326001/first-network/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/ca.crt]
	General.TLS.ClientAuthRequired = false
	General.TLS.ClientRootCAs = []
	General.Cluster.RootCAs = [/fabric-config/fabric-samples20190326001/first-network/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/ca.crt]
	General.Cluster.ClientCertificate = "/fabric-config/fabric-samples20190326001/first-network/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.crt"
	General.Cluster.ClientPrivateKey = "/fabric-config/fabric-samples20190326001/first-network/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/server.key"
	General.Cluster.DialTimeout = 5s
	General.Cluster.RPCTimeout = 7s
	General.Cluster.ReplicationBufferSize = 20971520
	General.Cluster.ReplicationPullTimeout = 5s
	General.Cluster.ReplicationRetryTimeout = 5s
	General.Keepalive.ServerMinInterval = 1m0s
	General.Keepalive.ServerInterval = 2h0m0s
	General.Keepalive.ServerTimeout = 20s
	General.GenesisMethod = "file"
	General.GenesisProfile = "SampleInsecureSolo"
	General.SystemChannel = "test-system-channel-name"
	General.GenesisFile = "/fabric-config/fabric-samples20190326001/first-network/channel-artifacts/genesis.block"
	General.Profile.Enabled = false
	General.Profile.Address = "0.0.0.0:6060"
	General.LocalMSPDir = "/fabric-config/fabric-samples20190326001/first-network/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp"
	General.LocalMSPID = "OrdererMSP"
	General.BCCSP.ProviderName = "SW"
	General.BCCSP.SwOpts.SecLevel = 256
	General.BCCSP.SwOpts.HashFamily = "SHA2"
	General.BCCSP.SwOpts.Ephemeral = false
	General.BCCSP.SwOpts.FileKeystore.KeyStorePath = "/fabric-config/fabric-samples20190326001/first-network/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp/keystore"
	General.BCCSP.SwOpts.DummyKeystore =
	General.BCCSP.SwOpts.InmemKeystore =
	General.BCCSP.PluginOpts =
	General.Authentication.TimeWindow = 15m0s
	FileLedger.Location = "/var/hyperledger/production/orderer"
	FileLedger.Prefix = "hyperledger-fabric-ordererledger"
	RAMLedger.HistorySize = 1000
	Kafka.Retry.ShortInterval = 5s
	Kafka.Retry.ShortTotal = 10m0s
	Kafka.Retry.LongInterval = 5m0s
	Kafka.Retry.LongTotal = 12h0m0s
	Kafka.Retry.NetworkTimeouts.DialTimeout = 10s
	Kafka.Retry.NetworkTimeouts.ReadTimeout = 10s
	Kafka.Retry.NetworkTimeouts.WriteTimeout = 10s
	Kafka.Retry.Metadata.RetryMax = 3
	Kafka.Retry.Metadata.RetryBackoff = 250ms
	Kafka.Retry.Producer.RetryMax = 3
	Kafka.Retry.Producer.RetryBackoff = 100ms
	Kafka.Retry.Consumer.RetryBackoff = 2s
	Kafka.Verbose = true
	Kafka.Version = 0.10.2.0
	Kafka.TLS.Enabled = false
	Kafka.TLS.PrivateKey = ""
	Kafka.TLS.Certificate = ""
	Kafka.TLS.RootCAs = []
	Kafka.TLS.ClientAuthRequired = false
	Kafka.TLS.ClientRootCAs = []
	Kafka.SASLPlain.Enabled = false
	Kafka.SASLPlain.User = ""
	Kafka.SASLPlain.Password = ""
	Kafka.Topic.ReplicationFactor = 1
	Debug.BroadcastTraceDir = ""
	Debug.DeliverTraceDir = ""
	Consensus = map[SnapDir:/var/hyperledger/production/orderer/etcdraft/snapshot WALDir:/var/hyperledger/production/orderer/etcdraft/wal]
	Operations.ListenAddress = "127.0.0.1:8443"
	Operations.TLS.Enabled = false
	Operations.TLS.PrivateKey = ""
	Operations.TLS.Certificate = ""
	Operations.TLS.RootCAs = []
	Operations.TLS.ClientAuthRequired = false
	Operations.TLS.ClientRootCAs = []
	Metrics.Provider = "disabled"
	Metrics.Statsd.Network = "udp"
	Metrics.Statsd.Address = "127.0.0.1:8125"
	Metrics.Statsd.WriteInterval = 30s
	Metrics.Statsd.Prefix = ""
2019-03-27 06:53:55.366 UTC [orderer.common.server] initializeServerConfig -> INFO 003 Starting orderer with TLS enabled
2019-03-27 06:53:55.368 UTC [fsblkstorage] newBlockfileMgr -> INFO 004 Getting block information from block storage
2019-03-27 06:53:55.376 UTC [orderer.commmon.multichannel] Initialize -> INFO 005 Starting system channel 'byfn-sys-channel' with genesis block hash bebf443d931d281c512530edde749961006e229ed15c1cd02e618f98b823f3f1 and orderer type solo
2019-03-27 06:53:55.376 UTC [orderer.common.server] Start -> INFO 006 Starting orderer:
 Version: 1.4.0
 Commit SHA: d700b43
 Go version: go1.11.1
 OS/Arch: linux/amd64
2019-03-27 06:53:55.377 UTC [orderer.common.server] Start -> INFO 007 Beginning to serve requests
# kubectl create -f orderer-svc.yaml
# kubectl create -f peer0-org1-rc.yaml
# kubectl create -f peer0-org1-svc.yaml
# kubectl create -f peer1-org1-rc.yaml
# kubectl create -f peer1-org1-svc.yaml

# kubectl exec -it peer0-org1-zwdr7 /bin/bash
# peer channel list
# export CHANNEL_NAME=mychannel
# export CORE_PEER_MSPCONFIGPATH=/fabric-config/fabric-samples/first-network/crypto-config/peerOrganizations/org1.example.com/users/Admin\@org1.example.com/msp/
# peer channel create -o orderer-example-com:7050 -c $CHANNEL_NAME -f /fabric-config/fabric-samples/first-network/channel-artifacts/channel.tx
# peer channel join -b ${CHANNEL_NAME}.block
# peer channel list

这里有问题，怀疑是CORE_VM_ENDPOINT配置相关，线索在https://www.sohu.com/a/164354478_609552
